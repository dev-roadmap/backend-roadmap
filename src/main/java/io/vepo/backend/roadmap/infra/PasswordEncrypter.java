package io.vepo.backend.roadmap.infra;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;

import javax.annotation.PostConstruct;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ApplicationScoped
public class PasswordEncrypter {
    private static final Logger logger = LoggerFactory.getLogger(PasswordEncrypter.class);
    private SecretKeySpec secretKey;
    private byte[] key;

    @Inject
    @ConfigProperty(name = "PASSWORD_SECRET_KEY", defaultValue = "sVpJT9RIGp") // Generated by
                                                                               // https://www.random.org/strings/
    String secretKeyPlain;

    @Inject
    @ConfigProperty(name = "PASSWORD_HASH_ALGORITHM", defaultValue = "SHA-512")
    String hashAlgorithm;

    @Inject
    @ConfigProperty(name = "PASSWORD_CRYPT_ALGORITHM", defaultValue = "AES")
    String cryptAlgorithm;

    @Inject
    @ConfigProperty(name = "PASSWORD_CIPHER", defaultValue = "AES/ECB/PKCS5Padding")
    String cipherTransformation;

    @PostConstruct
    public void setup() {
        MessageDigest sha = null;
        try {
            key = secretKeyPlain.getBytes("UTF-8");
            sha = MessageDigest.getInstance(hashAlgorithm);
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            secretKey = new SecretKeySpec(key, cryptAlgorithm);
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
            logger.error("Error initializing Password Encrypter!", e);
        }
    }

    public String encrypt(String strToEncrypt) {
        try {
            Cipher cipher = Cipher.getInstance(cipherTransformation);
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException
                | BadPaddingException | UnsupportedEncodingException e) {
            logger.error("Error encrypting password!", e);
            throw new RuntimeException(e);
        }
    }

    public String decrypt(String strToDecrypt) {
        try {
            Cipher cipher = Cipher.getInstance(cipherTransformation);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        } catch (NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException
                | BadPaddingException e) {
            logger.error("Error deencrypting password!", e);
            throw new RuntimeException(e);
        }
    }

}
